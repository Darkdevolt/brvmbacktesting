import streamlit as st
import pandas as pd
import io

# Fonction de nettoyage des donn√©es avec plus de v√©rifications
def nettoyer_fichier(uploaded_file):
    try:
        # D√©tection du format du fichier
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file, delimiter=",", encoding="utf-8")
        else:
            xls = pd.ExcelFile(uploaded_file)
            df = pd.read_excel(xls, sheet_name=xls.sheet_names[0])

        # Renommage des colonnes pour correspondre aux donn√©es attendues
        df.columns = ["Date", "Dernier", "Ouverture", "Plus Haut", "Plus Bas", "Volume", "Variation %"][:df.shape[1]]

        # V√©rifier les types avant transformation
        st.write("### Types des donn√©es AVANT correction :")
        st.write(df.dtypes)

        # Correction des s√©parateurs d√©cimaux et conversion en float
        cols_a_corriger = ["Dernier", "Ouverture", "Plus Haut", "Plus Bas"]
        for col in cols_a_corriger:
            df[col] = df[col].astype(str).str.replace(',', '.').astype(float)

            # V√©rification : affichons les premi√®res valeurs avant correction
            st.write(f"üîé V√©rification des valeurs de `{col}` avant multiplication :")
            st.write(df[col].head(10))

        # D√©tection automatique du probl√®me (ex : valeurs d√©j√† en milliers ou non)
        if df["Dernier"].max() < 100:  # Hypoth√®se : si toutes les valeurs sont < 100, alors elles doivent √™tre multipli√©es
            for col in cols_a_corriger:
                df[col] *= 1000  # Multiplication par 1000

        # V√©rification apr√®s correction
        st.write("### Types des donn√©es APR√àS correction :")
        st.write(df.dtypes)

        # Affichage des premi√®res valeurs apr√®s correction
        for col in cols_a_corriger:
            st.write(f"üîé V√©rification des valeurs de `{col}` APR√àS multiplication :")
            st.write(df[col].head(10))

        # Correction des dates
        df["Date"] = pd.to_datetime(df["Date"], errors='coerce')

        return df
    except Exception as e:
        st.error(f"Erreur : {e}")
        return None

# Interface Streamlit
st.title("Nettoyage des Donn√©es de Bourse")

uploaded_file = st.file_uploader("Uploader un fichier CSV ou Excel", type=["csv", "xlsx"])

if uploaded_file is not None:
    df_propre = nettoyer_fichier(uploaded_file)

    if df_propre is not None:
        st.success("Fichier trait√© avec succ√®s !")
        st.write("### Donn√©es Nettoy√©es :")
        st.dataframe(df_propre)

        # T√©l√©charger le fichier nettoy√©
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_propre.to_excel(writer, index=False, sheet_name="Donn√©es Nettoy√©es")
        processed_data = output.getvalue()

        st.download_button(
            label="T√©l√©charger le fichier nettoy√©",
            data=processed_data,
            file_name="data_propre.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )