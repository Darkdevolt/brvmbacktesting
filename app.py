import streamlit as st
import pandas as pd
import os

# Configuration de la page
st.set_page_config(page_title="Backtesting BRVM", layout="wide")

st.title("üìà Backtesting sur NTLC - BRVM")

# Upload du fichier CSV ou Excel
uploaded_file = st.file_uploader("Upload ton fichier de donn√©es (CSV ou Excel)", type=["csv", "xls", "xlsx"])

if uploaded_file is not None:
    # Extraction de l'extension du fichier
    filename = uploaded_file.name.lower()
    file_extension = os.path.splitext(filename)[1]

    try:
        # Lecture du fichier selon son format
        if file_extension == ".csv":
            try:
                data = pd.read_csv(uploaded_file, encoding="utf-8", delimiter=";", error_bad_lines=False)
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la lecture du fichier CSV : {e}")
                st.stop()
        
        elif file_extension in [".xls", ".xlsx"]:
            try:
                data = pd.read_excel(uploaded_file, engine="openpyxl")
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la lecture du fichier Excel : {e}")
                st.stop()

        else:
            st.error("‚ùå Format de fichier non support√©. Veuillez uploader un fichier CSV ou Excel.")
            st.stop()

        # Affichage des premi√®res lignes pour v√©rifier les colonnes
        st.subheader("üìä Aper√ßu des donn√©es charg√©es")
        st.write(data.head())

        # V√©rification automatique des colonnes
        st.subheader("‚úÖ V√©rification des colonnes")
        st.write("Colonnes d√©tect√©es :", list(data.columns))

        # Tentative d'auto-d√©tection de la colonne de date
        date_columns = [col for col in data.columns if "date" in col.lower()]
        if date_columns:
            date_col = date_columns[0]
            try:
                data[date_col] = pd.to_datetime(data[date_col], errors="coerce")
                st.success(f"üìÖ Colonne date d√©tect√©e : **{date_col}** et convertie en format datetime.")
            except Exception as e:
                st.error(f"‚ùå Erreur de conversion de la colonne Date : {e}")
                st.stop()
        else:
            st.error("‚ùå Aucune colonne Date trouv√©e. V√©rifiez votre fichier.")
            st.stop()

        # V√©rification et correction des types de colonnes
        for col in data.columns:
            if data[col].dtype == "object":
                try:
                    data[col] = pd.to_numeric(data[col].str.replace(",", ".").str.replace(" ", ""), errors="coerce")
                except:
                    pass

        # D√©tection de la colonne "Cl√¥ture" ou "Close" pour le graphique
        possible_price_cols = [col for col in data.columns if "cl√¥ture" in col.lower() or "close" in col.lower()]
        if possible_price_cols:
            price_col = possible_price_cols[0]
            st.subheader("üìâ √âvolution des prix de cl√¥ture")
            st.line_chart(data.set_index(date_col)[price_col])
        else:
            st.error("‚ùå Impossible de d√©tecter une colonne de prix de cl√¥ture. V√©rifiez votre fichier.")

    except Exception as e:
        st.error(f"‚ùå Erreur inattendue : {e}")

else:
    st.info("üì§ Charge un fichier CSV ou Excel pour commencer l'analyse.")