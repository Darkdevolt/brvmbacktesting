import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
import io
import datetime
from matplotlib.figure import Figure

st.set_page_config(
    page_title="Calcul de VaR Historique",
    page_icon="üìä",
    layout="wide"
)

# Fonctions utilitaires
def calculate_returns(data, price_column):
    """Calcule les rendements logarithmiques."""
    return np.log(data[price_column] / data[price_column].shift(1)).dropna()

def calculate_var(returns, confidence_level, portfolio_value):
    """Calcule la VaR historique."""
    alpha = 1 - confidence_level/100
    var = np.percentile(returns, alpha * 100) * portfolio_value
    return abs(var)  # VaR est g√©n√©ralement exprim√©e en valeur positive

def calculate_rolling_var(returns, confidence_level, portfolio_value, window_size):
    """Calcule la VaR sur une fen√™tre glissante."""
    rolling_var = []
    for i in range(len(returns) - window_size + 1):
        window_returns = returns.iloc[i:i+window_size]
        var = calculate_var(window_returns, confidence_level, portfolio_value)
        rolling_var.append(var)
    return pd.Series(rolling_var, index=returns.index[window_size-1:])

def check_stationarity(returns):
    """V√©rifie la stationnarit√© des rendements avec le test ADF."""
    result = adfuller(returns.dropna())
    return {
        'Test Statistic': result[0],
        'p-value': result[1],
        'Critical Values': result[4],
        'Is Stationary': result[1] < 0.05
    }

def detect_outliers(returns, threshold=3):
    """D√©tecte les valeurs aberrantes bas√©es sur les Z-scores."""
    z_scores = (returns - returns.mean()) / returns.std()
    return returns[abs(z_scores) > threshold]

# Interface Streamlit
st.title("Calculateur de VaR Historique Non-Param√©trique")

# Sidebar pour les options
st.sidebar.header("Options")

# Upload de fichier
uploaded_file = st.sidebar.file_uploader("T√©l√©charger un fichier CSV", type="csv")

if uploaded_file is not None:
    # Charger les donn√©es
    try:
        data = pd.read_csv(uploaded_file, parse_dates=['Date'])
        data.set_index('Date', inplace=True)
    except Exception as e:
        data = pd.read_csv(uploaded_file)
        st.warning("Format de date non reconnu, veuillez vous assurer que la colonne 'Date' est au format date.")
    
    # Afficher les premi√®res lignes des donn√©es
    st.subheader("Aper√ßu des donn√©es")
    st.dataframe(data.head())
    
    # S√©lection de colonne pour le calcul des rendements
    price_column = st.sidebar.selectbox(
        "S√©lectionner la colonne de prix pour calculer les rendements",
        options=data.columns,
        index=data.columns.get_loc("Close") if "Close" in data.columns else 0
    )
    
    # Options de calcul VaR
    st.sidebar.subheader("Param√®tres VaR")
    confidence_level = st.sidebar.slider("Niveau de confiance (%)", 90, 99, 95)
    horizon_days = st.sidebar.slider("Horizon de risque (jours)", 1, 30, 1)
    portfolio_value = st.sidebar.number_input("Valeur du portefeuille (‚Ç¨)", value=100000.0, step=1000.0)
    min_history_days = st.sidebar.slider("Minimum de jours historiques", 100, 500, 250)
    
    # Calcul des rendements
    returns = calculate_returns(data, price_column)
    
    # V√©rification de la suffisance des donn√©es
    if len(returns) < min_history_days:
        st.error(f"Les donn√©es sont insuffisantes. Il faut au moins {min_history_days} observations valides pour le calcul de la VaR.")
    else:
        # Correction de l'horizon de risque
        if horizon_days > 1:
            # Utilisation de la r√®gle de la racine carr√©e du temps pour ajuster la VaR
            returns_adjusted = returns * np.sqrt(horizon_days)
        else:
            returns_adjusted = returns
        
        # Calcul de la VaR
        var_value = calculate_var(returns_adjusted, confidence_level, portfolio_value)
        
        # Affichage des r√©sultats
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("R√©sultats VaR")
            st.markdown(f"""
            - **VaR {confidence_level}% sur {horizon_days} jour(s)**: {var_value:.2f} ‚Ç¨
            - **Signification**: Avec une probabilit√© de {confidence_level}%, la perte maximale 
              ne d√©passera pas {var_value:.2f} ‚Ç¨ sur un horizon de {horizon_days} jour(s).
            - **Pourcentage du portefeuille**: {(var_value/portfolio_value)*100:.2f}%
            """)
            
            # Test de stationnarit√©
            stationarity = check_stationarity(returns)
            st.subheader("Test de Stationnarit√© (ADF)")
            st.markdown(f"""
            - **Statistique de test**: {stationarity['Test Statistic']:.4f}
            - **p-value**: {stationarity['p-value']:.4f}
            - **Stationnarit√©**: {"‚úÖ Stationnaire" if stationarity['Is Stationary'] else "‚ùå Non-stationnaire"}
            """)
            
            # D√©tection des valeurs aberrantes
            outliers = detect_outliers(returns)
            st.subheader("D√©tection des valeurs aberrantes")
            if len(outliers) > 0:
                st.write(f"Nombre de valeurs aberrantes d√©tect√©es: {len(outliers)}")
                st.dataframe(outliers)
            else:
                st.write("Aucune valeur aberrante d√©tect√©e.")
        
        with col2:
            # Visualisation de la distribution des rendements
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(returns, kde=True, ax=ax)
            var_percentile = np.percentile(returns, (1 - confidence_level/100) * 100)
            ax.axvline(var_percentile, color='red', linestyle='--', label=f'VaR {confidence_level}%')
            ax.set_title(f'Distribution des rendements et VaR {confidence_level}%')
            ax.legend()
            st.pyplot(fig)
            
            # Rolling VaR
            st.subheader("VaR Glissante")
            window_size = st.slider("Taille de la fen√™tre glissante (jours)", 50, 250, 100)
            rolling_var = calculate_rolling_var(returns, confidence_level, portfolio_value, window_size)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            rolling_var.plot(ax=ax)
            ax.set_title(f'VaR {confidence_level}% glissante (fen√™tre de {window_size} jours)')
            ax.set_ylabel('VaR (‚Ç¨)')
            st.pyplot(fig)
        
        # Analyse de sensibilit√©
        st.subheader("Analyse de sensibilit√©")
        col1, col2 = st.columns(2)
        
        with col1:
            # Sensibilit√© au niveau de confiance
            confidence_levels = range(90, 100)
            vars_by_conf = [calculate_var(returns_adjusted, cl, portfolio_value) for cl in confidence_levels]
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(confidence_levels, vars_by_conf, marker='o')
            ax.set_title('Sensibilit√© de la VaR au niveau de confiance')
            ax.set_xlabel('Niveau de confiance (%)')
            ax.set_ylabel('VaR (‚Ç¨)')
            st.pyplot(fig)
        
        with col2:
            # Sensibilit√© √† l'horizon de risque
            horizons = range(1, 31, 2)
            vars_by_horizon = [calculate_var(returns * np.sqrt(h), confidence_level, portfolio_value) 
                               for h in horizons]
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(horizons, vars_by_horizon, marker='o')
            ax.set_title(f'Sensibilit√© de la VaR {confidence_level}% √† l\'horizon')
            ax.set_xlabel('Horizon (jours)')
            ax.set_ylabel('VaR (‚Ç¨)')
            st.pyplot(fig)
        
        # Backtesting
        st.subheader("Backtesting")
        lookback_period = st.slider("P√©riode de backtesting (jours)", 50, 250, 100, 
                                   help="Nombre de jours pour le backtesting")
        
        if len(returns) >= lookback_period:
            # Calcul des violations
            var_series = []
            violations = []
            
            for i in range(len(returns) - lookback_period + 1):
                # Calculer la VaR sur la fen√™tre pr√©c√©dente
                var_window = returns.iloc[i:i+lookback_period-1]
                next_return = returns.iloc[i+lookback_period-1]
                var_value = calculate_var(var_window, confidence_level, portfolio_value)
                
                var_series.append(var_value)
                # Une violation se produit lorsque la perte r√©elle d√©passe la VaR pr√©dite
                violations.append(abs(next_return * portfolio_value) > var_value and next_return < 0)
            
            violation_rate = sum(violations) / len(violations)
            expected_rate = 1 - confidence_level/100
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                - **Taux de violation**: {violation_rate:.4f} ({sum(violations)} violations sur {len(violations)} jours)
                - **Taux attendu**: {expected_rate:.4f}
                - **Ratio (Observ√©/Attendu)**: {violation_rate/expected_rate:.2f}
                """)
                
                if abs(violation_rate/expected_rate - 1) > 0.5:
                    st.warning("Le mod√®le de VaR pourrait √™tre mal calibr√© - le taux de violation s'√©carte significativement du taux attendu.")
            
            with col2:
                # Graphique des violations
                fig, ax = plt.subplots(figsize=(10, 6))
                
                # S√©rie des rendements pour la p√©riode de backtesting
                backtest_returns = returns.iloc[-len(violations):] * portfolio_value
                backtest_dates = backtest_returns.index
                
                # Tracer les rendements et les violations
                ax.plot(backtest_dates, backtest_returns, color='black', alpha=0.5, label='Rendements')
                
                # Calculer la VaR n√©gative (car les rendements n√©gatifs sont des pertes)
                neg_var_series = [-v for v in var_series]
                
                # Tracer la ligne de VaR
                ax.plot(backtest_dates, neg_var_series, color='red', linestyle='--', label=f'VaR {confidence_level}%')
                
                # Marquer les violations
                violation_indices = [i for i, v in enumerate(violations) if v]
                if violation_indices:
                    violation_dates = [backtest_dates[i] for i in violation_indices]
                    violation_values = [backtest_returns.iloc[i] for i in violation_indices]
                    ax.scatter(violation_dates, violation_values, color='red', marker='x', s=100, label='Violations')
                
                ax.set_title(f'Backtesting de la VaR {confidence_level}%')
                ax.set_ylabel('Rendement du portefeuille (‚Ç¨)')
                ax.legend()
                
                # Retourner le graphique pour que les pertes soient vers le bas
                ax.invert_yaxis()
                
                st.pyplot(fig)
else:
    st.info("Veuillez t√©l√©charger un fichier CSV avec au moins les colonnes: Date, Open, High, Low, Close, Volume")
    
    # Exemple de donn√©es
    st.subheader("Format de donn√©es attendu:")
    example_data = {
        "Date": ["2023-01-01", "2023-01-02", "2023-01-03"],
        "Open": [100.0, 101.2, 99.5],
        "High": [102.5, 103.0, 101.2],
        "Low": [99.0, 100.5, 98.0],
        "Close": [101.2, 99.5, 100.8],
        "Volume": [1500000, 1250000, 1350000]
    }
    st.dataframe(pd.DataFrame(example_data))

# Ajouter des informations suppl√©mentaires
with st.expander("√Ä propos de la VaR Historique"):
    st.markdown("""
    ## VaR Historique (Non-Param√©trique)
    
    La Value-at-Risk (VaR) historique est une m√©thode non-param√©trique pour estimer le risque d'un portefeuille financier.
    
    ### Pr√©requis
    * **Donn√©es**: rendements historiques du portefeuille sur au moins 1 an (‚â• 250 observations journali√®res).
    * **Horizon de risque**: d√©finition claire (1 jour, 10 jours‚Ä¶).
    * **Niveau de confiance** (Œ±): ex. 95%, 99%.
    * **Montant expos√©**: la valeur du portefeuille sur laquelle on applique la VaR.
    
    ### V√©rifications importantes
    * **Qualit√© des donn√©es**: absence de lacunes ou dates manquantes, filtrage des valeurs aberrantes.
    * **Stationnarit√© des rendements**: stabilit√© de la moyenne et de la variance dans le temps.
    * **Sensibilit√© √† l'horizon historique**: tester la stabilit√© en variant la fen√™tre historique.
    * **Robustesse du quantile empirique**: calcul de la VaR sur plusieurs sous-√©chantillons (rolling window).
    
    Cette application impl√©mente toutes ces v√©rifications pour vous aider √† calculer une VaR fiable.
    """)

# Ajouter des informations sur l'auteur et le code source
st.sidebar.markdown("---")
st.sidebar.info(
    "Cette application a √©t√© d√©velopp√©e pour calculer la VaR historique "
    "non-param√©trique d'un portefeuille financier."
)
st.sidebar.markdown("[Code source disponible sur GitHub](https://github.com/votre-username/historicalVaR)")
